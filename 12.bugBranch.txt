1.Git还提供了一个stash功能，可以把当前工作现场“储藏”起来，等以后恢复现场后继续工作

 $ git stash
 
2.确定要在哪个分支上修复bug，假定需要在master分支上修复，就从master创建临时分支

 $ git switch master
 $ git branch issue-101
 $ git switch issue-101
 或者
 $ git switch -c issue-101
 
3.在分支上修改bug，然后提交

 $ git add readme.txt 
 $ git commit -m "fix bug 101"

4.修复完成后，切换到master分支，并完成合并，最后删除issue-101分支

 $ git switch master
 Switched to branch 'master'
 Your branch is ahead of 'origin/master' by 6 commits.
   (use "git push" to publish your local commits)

 $ git merge --no-ff -m "merged bug fix 101" issue-101
 Merge made by the 'recursive' strategy.
  readme.txt | 2 +-
  1 file changed, 1 insertion(+), 1 deletion(-)
  
5.现在，是时候接着回到dev分支干活了！

 $ git switch dev
 Switched to branch 'dev'

 $ git status
 On branch dev
 nothing to commit, working tree clean
 
6.刚才的工作现场存到哪去了？用git stash list命令看看
 
 $ git stash list
 stash@{0}: WIP on dev: f52c633 add merge
 
7.工作现场还在，Git把stash内容存在某个地方了，但是需要恢复一下，有两个办法：

一是用git stash apply恢复，但是恢复后，stash内容并不删除，你需要用git stash drop来删除；

另一种方式是用git stash pop，恢复的同时把stash内容也删了：

 $ git stash pop
 On branch dev
 Changes to be committed:
   (use "git reset HEAD <file>..." to unstage)
 
	 new file:   hello.py

 Changes not staged for commit:
   (use "git add <file>..." to update what will be committed)
   (use "git checkout -- <file>..." to discard changes in working directory)
 
	 modified:   readme.txt

 Dropped refs/stash@{0} (5d677e2ee266f39ea296182fb2354265b91b3b2a)
 
8.那怎么在dev分支上修复同样的bug？Git专门提供了一个cherry-pick命令，让我们能复制一个特定的提交到当前分支

 $ git branch
 * dev
   master
 $ git cherry-pick 4c805e2
 [master 1d4b803] fix bug 101
  1 file changed, 1 insertion(+), 1 deletion(-)