1.要查看远程库的信息用

 $ git remote -v
 
2.推送分支

 $ git push origin <branchname>
 
master分支是主分支，因此要时刻与远程同步；

dev分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；

bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；

feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。

3.抓取分支,多人协作时，大家都会往master和dev分支上推送各自的修改,多人协作时，大家都会往master和dev分支上推送各自的修改
你的小伙伴要在dev分支上开发，就必须创建远程origin的dev分支到本地，于是他用这个命令创建本地dev分支

 $ git checkout -b dev origin/dev
 
现在，他就可以在dev上继续修改，然后，时不时地把dev分支push到远程

 $ git add env.txt
 $ git commit -m "add env"
 $ git push origin dev
 
4.碰巧你也对同样的文件作了修改，并试图推送

 $ cat env.txt
 env
 $ git add env.txt
 $ git commit -m "add new env"
 $ git push origin dev
 
5.推送失败，因为你的小伙伴的最新提交和你试图推送的提交有冲突，解决办法也很简单，Git已经提示我们，先用git pull把最新的提交从origin/dev抓下来，然后，在本地合并，解决冲突，再推送

 $ git pull
 
git pull也失败了，原因是没有指定本地dev分支与远程origin/dev分支的链接，根据提示，设置dev和origin/dev的链接

 $ git branch --set-upstream-to=origin/dev dev
 $ git pull
 
这回git pull成功，但是合并有冲突，需要手动解决，解决的方法和分支管理中的解决冲突完全一样。解决后，提交，再push

 $ git commit -m "fix env conflict"
 $ git push origin dev
 